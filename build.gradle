plugins {
    id "org.jetbrains.intellij" version "0.0.43"
    id "de.undercouch.download" version '2.1.0'
}

group 'de.plushnikov.intellij.plugin'
version = "${version}"
def javaVersion = JavaVersion.VERSION_1_6

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

configurations {
    lombok
    hrisey
    gen
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    lombok group: 'org.projectlombok', name: 'lombok', version: '1.16.8', classifier: 'sources', ext: 'jar'
    hrisey group: 'pl.mg6.hrisey', name: 'hrisey', version: '0.3.1', classifier: 'sources', ext: 'jar'

//    gen 'de.jflex:jflex:1.6.0'
    gen files('lib/grammar-kit.jar')
    gen files('lib/light-psi-all.jar')
}


copy {
    includeEmptyDirs = false
    from({ zipTree(configurations.lombok.singleFile) }) {
        include 'lombok/extern/**'
        include 'lombok/experimental/**'
        include 'lombok/Builder.java'
        include 'lombok/AccessLevel.java'
        include 'lombok/*ArgsConstructor.java'
        include 'lombok/Cleanup.java'
        include 'lombok/Data.java'
        include 'lombok/Delegate.java'
        include 'lombok/Getter.java'
        include 'lombok/Setter.java'
        include 'lombok/Equals*.java'
        include 'lombok/NonNull.java'
        include 'lombok/Synchronized.java'
        include 'lombok/ToString.java'
        include 'lombok/SneakyThrows.java'
        include 'lombok/Value.java'
        include 'lombok/val.java'
        include 'lombok/Singular.java'
        include 'lombok/core/handlers/Singulars.java'
    }
    into("generated/src")
}

copy {
    includeEmptyDirs = false
    from({ zipTree(configurations.hrisey.singleFile) }) {
        include 'hrisey/Parcelable.java'
        include 'hrisey/Preferences.java'
    }
    into("generated/src")
}

copy {
    includeEmptyDirs = false
    from({ zipTree(configurations.lombok.singleFile) }) {
        include '**/*.txt'
    }
    into("generated/resources")
}

apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'

    if (!Boolean.valueOf(System.getenv('CI'))) {
        options.bootClasspath = "$JDK6_HOME/jre/lib/rt.jar"
    }
}

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

plugins.withType(JavaPlugin) {
    test {
        systemProperty "NO_FS_ROOTS_ACCESS_CHECK", "true"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java',
                       'generated/src']
        }
        resources {
            srcDirs = ['src/main/resources',
                       'generated/resources']
        }
    }
}

apply plugin: 'jacoco'
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

apply plugin: 'org.jetbrains.intellij'
intellij {
    def ideaVersionExternDefinition = System.getenv("IDEA_VERSION")
    version = ideaVersionExternDefinition ? ideaVersionExternDefinition : ideaVersion
    pluginName 'lombok-plugin'
    plugins 'coverage'

    // Use custom property from forked plugin
    skipInstrumentNotNull = true

    updateSinceUntilBuild = false
    sandboxDirectory = "${project.projectDir}/idea-sandbox/idea-${version}"
    systemProperty 'idea.is.internal', 'false'
    downloadSources !Boolean.valueOf(System.getenv('CI'))

    publish {
        pluginId '6317'
        username 'mplushnikov'
        password System.properties['intellij.publish.password']
    }
}
